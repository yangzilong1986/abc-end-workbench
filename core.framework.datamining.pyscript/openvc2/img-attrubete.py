#coding=utf-8

import cv2
import numpy as np
from matplotlib import pyplot as plt
img = cv2.imread('D:\\DevN\\sample-data\\images\\football\\messi5.jpg')

# 你可以根据像素的行和列的坐标获取他的像素值。对BGR 图像而言，返回
# 值为B，G，R 的值。对灰度图像而言，会返回他的灰度值（亮度？intensity）
#首先我们需要读入一幅图像：
px=img[100,100]
print(px)#[157 166 200]
blue=img[100,100,0]
print (blue)#157

#类似的方式修改像素值。
img[100,100]=[255,255,255]

# 警告：
# Numpy 是经过优化了的进行快速矩阵运算的软件包。所以我们不推荐
# 逐个获取像素值并修改，这样会很慢，能有矩阵运算就不要用循环。

# 注意
# 上面提到的方法被用来选取矩阵的一个区域，比如说前5 行的后3
# 列。对于获取每一个像素值，也许使用Numpy 的array.item() 和array.
# itemset() 会更好。但是返回值是标量。如果你想获得所有B，G，R 的值，
# 你需要使用array.item() 分割他们。
print ("使用Numpy")
print (img.item(10,10,2))
img.itemset((10,10,2),100)
print (img.item(10,10,2))

# 图像的属性包括：行，列，通道，图像数据类型，像素数目等
# img.shape 可以获取图像的形状。他的返回值是一个包含行数，列数，
# 通道数的元组。
print ('img.shape 可以获取图像的形状。他的返回值是一个包含行数，列数，通道数的元组.')
print(img.shape)

# 注意：如果图像是灰度图，返回值仅有行数和列数。所以通过检查这个返回值
# 就可以知道加载的是灰度图还是彩色图。
print ('img.size 可以返回图像的像素数目.')
print (img.size)

# 注意：在除虫（debug）时img.dtype 非常重要。因为在OpenCVPython
# 代码中经常出现数据类型的不一致。
print ('img.dtype 返回的是图像的数据类型.')
print (img.dtype)

# 有时你需要对一幅图像的特定区域进行操作。
# 例如我们要检测一副图像中眼睛的位置，我们首先应该在图像中找到脸，
# 再在脸的区域中找眼睛，而不是直接在一幅图像中搜索。
# 这样会提高程序的准确性和性能。
# ROI也是使用Numpy 索引来获得的。现在我们选择球的部分并把他拷贝
# 到图像的其他区域。

#拷贝，即roi操作
# ROI(region of interest)，也就是感兴趣区域，如果你设置了图像了ROI，
# 那么在使用OpenCV的函数的时候，会只对ROI区域操作，其他区域忽略。举个例子：
ball = img[280:340, 330:390]
img[273:333, 100:160] = ball

# 有时我们需要对BGR 三个通道分别进行操作。这是你就需要把BGR 拆
# 分成单个通道。有时你需要把独立通道的图片合并成一个BGR 图像。
# 警告：
#cv2.split() 是一个比较耗时的操作。
# 只有真正需要时才用它，能用Numpy 索引就尽量用。

#单通道图，俗称灰度图，每个像素点只能有有一个值表示颜色，它的像素值在0到255之间，0是黑色，255是白色，中间值是一些不同等级的灰色。
# （也有3通道的灰度图，3通道灰度图只有一个通道有值，其他两个通道的值都是零）。

#三通道图，每个像素点都有3个值表示就是3通道。也有4通道的图。例如RGB图片即为三通道图片，
# RGB色彩模式是工业界的一种颜色标准，是通过对红(R)、绿(G)、蓝(B)三个颜色通道的变化以及它们相互之间的叠加来得到各式各样的颜色的，
# RGB即是代表红、绿、蓝三个通道的颜色，这个标准几乎包括了人类视力所能感知的所有颜色，
# 是目前运用最广的颜色系统之一。总之，每一个点由三个值表示。
# c0=img[:,:,0]=0

# 假如你想使所有像素的红色通道值都为0，你不必先拆分再赋值。你可以
# 直接使用Numpy 索引，这会更快。

# c1=img[:,:,1]=0

# c2=img[:,:,2]=0

# img[:,:,2]=0

#显示图片
cv2.imshow('image',img)
cv2.waitKey(0)
cv2.destroyAllWindows()

