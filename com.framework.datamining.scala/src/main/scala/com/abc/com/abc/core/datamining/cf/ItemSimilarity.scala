package com.abc.com.abc.core.datamining.cf

import breeze.numerics.sqrt
import org.apache.spark.rdd.RDD

/**
  * 用户评分
  *
  * @param userId
  * @param itemId
  * @param pref
  */
case class ItemRef(
    val userId:String,
    val itemId:String,
    val pref:Double
  )extends Serializable

/**
  * 用户推荐
  *
  * @param userId
  * @param itemId
  * @param pref
  */
case class UserRecomm(
    val userId:String,
    val itemId:String,
    val pref:Double
   )extends Serializable

case class ItemSimi(
     val itemId1:String,
     val itemId2:String,
     val similar:Double
    )extends Serializable



/**
  * 相似度计算
  * 支持同现相似度，欧式距离相似度，余弦相似度
  */
class ItemSimilarity extends Serializable{

  def Similarity(user_rdd:RDD[ItemRef],stype:String):(RDD[ItemSimi])={
    val simi_rdd=stype match{
       case "cooccurrence"=>ItemSimilarity.CoocurrenceSimilarity(user_rdd)
       case "cosine"=>ItemSimilarity.CosineSimilarity(user_rdd)
       case "euclidean"=>ItemSimilarity.EuclideanDistanceSimilarity(user_rdd)
   }
    simi_rdd
  }
}

object ItemSimilarity{

  /**
    * d(x,y)=sqrt(Σ(x(i)-y(i))*Σ(x(i)-y(i)))
    * sim(x,y)=n/(1+d(x,y))
    * @param user_rdd
    * @return
    */
  def EuclideanDistanceSimilarity(user_rdd:RDD[ItemRef]):(RDD[ItemSimi])={
    //1.数据做准备
    val user_rdd1=user_rdd.map(f=>(f.userId,f.itemId,f.pref))
    //    (1,1,1.0)
    //    (1,2,1.0)
    //    (2,1,1.0)
    //    (2,3,1.0)
    //    (3,4,1.0)
    //    (4,2,1.0)
    //    (4,4,1.0)
    //    (5,1,1.0)
    //    (5,2,1.0)
    //    (5,3,1.0)
    //    (6,4,1.0)

    //元组，用户 产品 评分
    val user_rdd2=user_rdd1.map(f=>(f._1,(f._2,f._3)))

    //2,用户、物品。评分笛卡尔积操作，物品1，物品2，评分1，评分2
    val user_rdd3=user_rdd2 join user_rdd2
    //    (4,((2,1.0),(2,1.0)))
    //    (4,((2,1.0),(4,1.0)))
    //    (4,((4,1.0),(2,1.0)))
    //    (4,((4,1.0),(4,1.0)))
    //    (5,((1,1.0),(1,1.0)))
    //    (5,((1,1.0),(2,1.0)))
    //    (5,((1,1.0),(3,1.0)))
    //    (5,((2,1.0),(1,1.0)))
    //    (5,((2,1.0),(2,1.0)))
    //    (5,((2,1.0),(3,1.0)))
    //    (5,((3,1.0),(1,1.0)))
    //    (5,((3,1.0),(2,1.0)))
    //    (5,((3,1.0),(3,1.0)))
    //    (6,((4,1.0),(4,1.0)))
    //    (2,((1,1.0),(1,1.0)))
    //    (2,((1,1.0),(3,1.0)))
    //    (2,((3,1.0),(1,1.0)))
    //    (2,((3,1.0),(3,1.0)))
    //    (3,((4,1.0),(4,1.0)))
    //    (1,((1,1.0),(1,1.0)))
    //    (1,((1,1.0),(2,1.0)))
    //    (1,((2,1.0),(1,1.0)))
    //    (1,((2,1.0),(2,1.0)))

    val user_rdd4=user_rdd3.map(f=>((
      f._2._1._1, //f元组的第二个元组的第一个元组的第一个元素
      f._2._2._1  //f元组的第二个元组的第二个元组的第一个元素
      ),(f._2._1._2,f._2._2._2)))//评分

    //元组(物品1，物品2，评分)
    val user_rdd5=user_rdd4.map(f=>(f._1,(f._2._1-f._2._2)*(f._2._1-f._2._2))).reduceByKey(_+_)
    //    ((1,1),0.0)
    //    ((2,1),0.0)
    //    ((1,3),0.0)
    //    ((4,2),0.0)
    //    ((3,3),0.0)
    //    ((2,2),0.0)
    //    ((4,4),0.0)
    //    ((2,4),0.0)
    //    ((1,2),0.0)
    //    ((2,3),0.0)
    //    ((3,1),0.0)
    //    ((3,2),0.0)

    val user_rdd6=user_rdd4.map(f=>(f._1,1)).reduceByKey(_+_)
    //    ((1,1),3)
    //    ((2,1),2)
    //    ((1,3),2)
    //    ((4,2),1)
    //    ((3,3),2)
    //    ((2,2),3)
    //    ((4,4),3)
    //    ((2,4),1)
    //    ((1,2),2)
    //    ((2,3),1)
    //    ((3,1),2)
    //    ((3,2),1)

    //非对角矩阵,d(x,y)=sqrt(Σ(x(i)-y(i))*Σ(x(i)-y(i)))
    val user_rdd7=user_rdd5.filter(f=>f._1._1!=f._1._2)
    //    ((2,1),0.0)
    //    ((1,3),0.0)
    //    ((4,2),0.0)
    //    ((2,4),0.0)
    //    ((1,2),0.0)
    //    ((2,3),0.0)
    //    ((3,1),0.0)
    //    ((3,2),0.0)

    //相似度计算
    val user_rdd8=user_rdd7.join(user_rdd6)
    //    ((2,1),(0.0,2))
    //    ((1,3),(0.0,2))
    //    ((4,2),(0.0,1))
    //    ((2,4),(0.0,1))
    //    ((1,2),(0.0,2))
    //    ((2,3),(0.0,1))
    //    ((3,1),(0.0,2))
    //    ((3,2),(0.0,1))

    val user_rdd9=user_rdd8.map(f=>(f._1._1,f._1._2,f._2._2/(1+sqrt(f._2._1))))
    //    (2,1,2.0)
    //    (1,3,2.0)
    //    (4,2,1.0)
    //    (2,4,1.0)
    //    (1,2,2.0)
    //    (2,3,1.0)
    //    (3,1,2.0)
    //    (3,2,1.0)



    user_rdd9.map(f=>ItemSimi(f._1,f._2,f._3))
  }

  /**
    * 余弦相似度计算
    * Σx(i)y(i)/sqrt(Σ(x(i)*x(i))*Σ(y(i)*y(i)))
    * @param user_rdd
    * @return
    */
  def CosineSimilarity(user_rdd:RDD[ItemRef]):(RDD[ItemSimi])={
    //1.数据做准备
    val user_rdd1=user_rdd.map(f=>(f.userId,f.itemId,f.pref))
    //    1,1,1
    //    1,2,1
    //    2,1,1
    //    2,3,1
    //    3,4,1
    //    4,2,1
    //    4,4,1
    //    5,1,1
    //    5,2,1
    //    5,3,1
    //    6,4,1
    //元组，用户 产品 评分
    val user_rdd2=user_rdd1.map(f=>(f._1,(f._2,f._3)))

    //2,用户、物品。评分笛卡尔积操作，物品1，物品2，评分1，评分2
    val user_rdd3=user_rdd2.join(user_rdd2)
    //    (4,((2,1.0),(2,1.0)))
    //    (4,((2,1.0),(4,1.0)))
    //    (4,((4,1.0),(2,1.0)))
    //    (4,((4,1.0),(4,1.0)))
    //    (5,((1,1.0),(1,1.0)))
    //    (5,((1,1.0),(2,1.0)))
    //    (5,((1,1.0),(3,1.0)))
    //    (5,((2,1.0),(1,1.0)))
    //    (5,((2,1.0),(2,1.0)))
    //    (5,((2,1.0),(3,1.0)))
    //    (5,((3,1.0),(1,1.0)))
    //    (5,((3,1.0),(2,1.0)))
    //    (5,((3,1.0),(3,1.0)))
    //    (6,((4,1.0),(4,1.0)))
    //    (2,((1,1.0),(1,1.0)))
    //    (2,((1,1.0),(3,1.0)))
    //    (2,((3,1.0),(1,1.0)))
    //    (2,((3,1.0),(3,1.0)))
    //    (3,((4,1.0),(4,1.0)))
    //    (1,((1,1.0),(1,1.0)))
    //    (1,((1,1.0),(2,1.0)))
    //    (1,((2,1.0),(1,1.0)))
    //    (1,((2,1.0),(2,1.0)))

   //(1,((2,1.0),(2,1.0)))
    val user_rdd4=user_rdd3.map(f=>((
        f._2._1._1, //f元组的第第二个元组的第一个元组的第一个元素
        f._2._2._1//f元组的第第二个元组的第二个元组的第一个元素
      ),(f._2._1._2,f._2._2._2)))//评分

    //    ((2,2),(1.0,1.0))
    //    ((2,4),(1.0,1.0))
    //    ((4,2),(1.0,1.0))
    //    ((4,4),(1.0,1.0))
    //    ((1,1),(1.0,1.0))
    //    ((1,2),(1.0,1.0))
    //    ((1,3),(1.0,1.0))
    //    ((2,1),(1.0,1.0))
    //    ((2,2),(1.0,1.0))
    //    ((2,3),(1.0,1.0))
    //    ((3,1),(1.0,1.0))
    //    ((3,2),(1.0,1.0))
    //    ((3,3),(1.0,1.0))
    //    ((4,4),(1.0,1.0))
    //    ((1,1),(1.0,1.0))
    //    ((1,3),(1.0,1.0))
    //    ((3,1),(1.0,1.0))
    //    ((3,3),(1.0,1.0))
    //    ((4,4),(1.0,1.0))
    //    ((1,1),(1.0,1.0))
    //    ((1,2),(1.0,1.0))
    //    ((2,1),(1.0,1.0))
    //    ((2,2),(1.0,1.0))

    //    Σx(i)y(i)/sqrt(Σ(x(i)*x(i))*Σ(y(i)*y(i)))
    //    x(i)*x(i)和x(i)y(i)
    val user_rdd5=user_rdd4.map(f=>(f._1,f._2._1*f._2._2)).reduceByKey(_+_)
    //    ((1,1),3.0)
    //    ((2,1),2.0)
    //    ((1,3),2.0)
    //    ((4,2),1.0)
    //    ((3,3),2.0)
    //    ((2,2),3.0)
    //    ((4,4),3.0)
    //    ((2,4),1.0)
    //    ((1,2),2.0)
    //    ((2,3),1.0)
    //    ((3,1),2.0)
    //    ((3,2),1.0)

    //4.对角阵
    val user_rdd6=user_rdd5.filter(f=>f._1._1==f._1._2)
    //    ((1,1),3.0)
    //    ((3,3),2.0)
    //    ((2,2),3.0)
    //    ((4,4),3.0)

    //5.非对角阵
    val user_rdd7=user_rdd5.filter(f=>f._1._1!=f._1._2)
    //    ((2,1),2.0)
    //    ((1,3),2.0)
    //    ((4,2),1.0)
    //    ((2,4),1.0)
    //    ((1,2),2.0)
    //    ((2,3),1.0)
    //    ((3,1),2.0)
    //    ((3,2),1.0)

    //6.相似度，第一个元素为(产品1,((产品1,产品2,相似度),产品1的评分))
    val user_rdd8=user_rdd7.map(f=>(f._1._1,(f._1._1,f._1._2,f._2))).join(user_rdd6.map(f=>(f._1._1,f._2)))
    //    (4,((4,2,1.0),3.0))
    //    (2,((2,1,2.0),3.0))
    //    (2,((2,4,1.0),3.0))
    //    (2,((2,3,1.0),3.0))
    //    (3,((3,1,2.0),2.0))
    //    (3,((3,2,1.0),2.0))
    //    (1,((1,3,2.0),3.0))
    //    (1,((1,2,2.0),3.0))

    //第一个元素为(产品1,(产品1,产品2,相似度),产品1的评分))
    val user_rdd9=user_rdd8.map(f=>(f._2._1._2,(f._2._1._1,f._2._1._2,f._2._1._3,f._2._2)))
    //    (2,(4,2,1.0,3.0))
    //    (1,(2,1,2.0,3.0))
    //    (4,(2,4,1.0,3.0))
    //    (3,(2,3,1.0,3.0))
    //    (1,(3,1,2.0,2.0))
    //    (2,(3,2,1.0,2.0))
    //    (3,(1,3,2.0,3.0))
    //    (2,(1,2,2.0,3.0))

    //第二个产品
    //每一个产品的评分
    val user_rdd10=user_rdd9.join(user_rdd6.map(f=>(f._1._1,f._2)))
    //    (4,((2,4,1.0,3.0),3.0))
    //    (2,((4,2,1.0,3.0),3.0))
    //    (2,((3,2,1.0,2.0),3.0))
    //    (2,((1,2,2.0,3.0),3.0))
    //    (3,((2,3,1.0,3.0),2.0))
    //    (3,((1,3,2.0,3.0),2.0))
    //    (1,((2,1,2.0,3.0),3.0))
    //    (1,((3,1,2.0,2.0),3.0))

    val user_rdd11=user_rdd10.map(f=>(f._2._1._1,f._2._1._2,f._2._1._3,f._2._1._4,f._2._2))
    //    (2,4,1.0,3.0,3.0)
    //    (4,2,1.0,3.0,3.0)
    //    (3,2,1.0,2.0,3.0)
    //    (1,2,2.0,3.0,3.0)
    //    (2,3,1.0,3.0,2.0)
    //    (1,3,2.0,3.0,2.0)
    //    (2,1,2.0,3.0,3.0)
    //    (3,1,2.0,2.0,3.0)

    //    Σx(i)y(i)/sqrt(Σ(x(i)*x(i))*Σ(y(i)*y(i)))
    val user_rdd12=user_rdd11.map(f=>(f._1,f._2,(f._3/sqrt(f._4*f._5))))
    //    (2,4,0.3333333333333333)
    //    (4,2,0.3333333333333333)
    //    (3,2,0.4082482904638631)
    //    (1,2,0.6666666666666666)
    //    (2,3,0.4082482904638631)
    //    (1,3,0.8164965809277261)
    //    (2,1,0.6666666666666666)
    //    (3,1,0.8164965809277261)

    user_rdd12.map(f=>ItemSimi(f._1,f._2,f._3))

  }


  def CoocurrenceSimilarity(user_rdd:RDD[ItemRef]):(RDD[ItemSimi])={
    //    1,1,1
    //    1,2,1
    //    2,1,1
    //    2,3,1
    //    3,4,1
    //    4,2,1
    //    4,4,1
    //    5,1,1
    //    5,2,1
    //    5,3,1
    //    6,4,1

    //1.数据做准备
    val user_rdd1=user_rdd.map(f=>(f.userId,f.itemId,f.pref))
    //    (1,1,1.0)
    //    (1,2,1.0)
    //    (2,1,1.0)
    //    (2,3,1.0)
    //    (3,4,1.0)
    //    (4,2,1.0)
    //    (4,4,1.0)
    //    (5,1,1.0)
    //    (5,2,1.0)
    //    (5,3,1.0)
    //    (6,4,1.0)

    val user_rdd2=user_rdd1.map(f=>(f._1,f._2))
    //    (1,1)
    //    (1,2)
    //    (2,1)
    //    (2,3)
    //    (3,4)
    //    (4,2)
    //    (4,4)
    //    (5,1)
    //    (5,2)
    //    (5,3)
    //    (6,4)

    //2.用户物品笛卡尔积,当出现相同Key时, join会出现笛卡尔积, 而cogroup的处理方式不同
    val user_rdd3=user_rdd2.join(user_rdd2)
    //    (4,(2,2))
    //    (4,(2,4))
    //    (4,(4,2))
    //    (4,(4,4))
    //    (5,(1,1))
    //    (5,(1,2))
    //    (5,(1,3))
    //    (5,(2,1))
    //    (5,(2,2))
    //    (5,(2,3))
    //    (5,(3,1))
    //    (5,(3,2))
    //    (5,(3,3))
    //    (6,(4,4))
    //    (2,(1,1))
    //    (2,(1,3))
    //    (2,(3,1))
    //    (2,(3,3))
    //    (3,(4,4))
    //    (1,(1,1))
    //    (1,(1,2))
    //    (1,(2,1))
    //    (1,(2,2))

    //    val user_rddco=user_rdd2.cogroup(user_rdd2)
    //    println("user_rddco cogroup:")
    //    user_rddco.foreach(println)

    val user_rdd4=user_rdd3.map(f=>(f._2,1))
    //    ((2,2),1)
    //    ((2,4),1)
    //    ((4,2),1)
    //    ((4,4),1)
    //    ((1,1),1)
    //    ((1,2),1)
    //    ((1,3),1)
    //    ((2,1),1)
    //    ((2,2),1)
    //    ((2,3),1)
    //    ((3,1),1)
    //    ((3,2),1)
    //    ((3,3),1)
    //    ((4,4),1)
    //    ((1,1),1)
    //    ((1,3),1)
    //    ((3,1),1)
    //    ((3,3),1)
    //    ((4,4),1)
    //    ((1,1),1)
    //    ((1,2),1)
    //    ((2,1),1)
    //    ((2,2),1)

    //3.物品、物品、频次
    val user_rdd5=user_rdd4.reduceByKey((x,y)=>x+y)
    //    ((1,1),3)
    //    ((2,1),2)
    //    ((1,3),2)
    //    ((4,2),1)
    //    ((3,3),2)
    //    ((2,2),3)
    //    ((4,4),3)
    //    ((2,4),1)
    //    ((1,2),2)
    //    ((2,3),1)
    //    ((3,1),2)
    //    ((3,2),1)

    //4.对角阵
    val user_rdd6=user_rdd5.filter(f=>f._1._1==f._1._2)
    //    ((1,1),3)
    //    ((3,3),2)
    //    ((2,2),3)
    //    ((4,4),3)

    //5.非对角阵
    //偶对Tuple为((item1,item2),frent)
    val user_rdd7=user_rdd5.filter(f=>f._1._1!=f._1._2)
    //    ((2,1),2)
    //    ((1,3),2)
    //    ((4,2),1)
    //    ((2,4),1)
    //    ((1,2),2)
    //    ((2,3),1)
    //    ((3,1),2)
    //    ((3,2),1)

    //6.计算同现相似度，物品1、物品2同现频率
    // 偶对Tuple为(item1,(item1,item2,frent))
    val user_rdd81=user_rdd7.map(f=>(f._1._1,(f._1._1,f._1._2,f._2)))
    //    (2,(2,1,2))
    //    (1,(1,3,2))
    //    (4,(4,2,1))
    //    (2,(2,4,1))
    //    (1,(1,2,2))
    //    (2,(2,3,1))
    //    (3,(3,1,2))
    //    (3,(3,2,1))

    //对角线元组Tuple为(item1,frent)
    val user_rdd82=user_rdd6.map(f=>(f._1._1,f._2))
    //    (1,3)
    //    (3,2)
    //    (2,3)
    //    (4,3)

    //user_rdd8为key为产品1为主的频率
    //                  产品1 产品1  频率
    //Tuple元组为(item1,(item1,item2,frent),frent)
//    val user_rdd8=user_rdd81.join(user_rdd82)
    //    (4,((4,2,1),3))
    //    (2,((2,1,2),3))
    //    (2,((2,4,1),3))
    //    (2,((2,3,1),3))
    //    (3,((3,1,2),2))
    //    (3,((3,2,1),2))
    //    (1,((1,3,2),3))
    //    (1,((1,2,2),3))

    val user_rdd8=user_rdd7.map(f=>(f._1._1,(f._1._1,f._1._2,f._2))).join(
      user_rdd6.map(f=>(f._1._1,f._2)))
    //
    //user_rdd9的key为产品2，而后取产品1，产品1，产品2，产品1的频率
    //Tuple item2,(item1_main, item_src_1,item_src_2,item_src_fent,item1_main_frent)
    val user_rdd9=user_rdd8.map(f=>(f._2._1._2,(f._2._1._1,f._2._1._2,f._2._1._3,f._2._2)))
    //    (2,(4,2,1,3))
    //    (1,(2,1,2,3))
    //    (4,(2,4,1,3))
    //    (3,(2,3,1,3))
    //    (1,(3,1,2,2))
    //    (2,(3,2,1,2))
    //    (3,(1,3,2,3))
    //    (2,(1,2,2,3))

    //元素2的频率
    val user_rdd10=user_rdd9.join(user_rdd6.map(f=>(f._1._1,f._2)))
    //    (4,((2,4,1,3),3))
    //    (2,((4,2,1,3),3))
    //    (2,((3,2,1,2),3))
    //    (2,((1,2,2,3),3))
    //    (3,((2,3,1,3),2))
    //    (3,((1,3,2,3),2))
    //    (1,((2,1,2,3),3))
    //    (1,((3,1,2,2),3))

    //去除key
    //偶对Tuple结构:(产品1,产品2,产品对原始频率,产品1频率,产品2频率)
    val user_rdd11=user_rdd10.map(f=>(f._2._1._1,f._2._1._2,f._2._1._3,f._2._1._4,f._2._2))
    //    (2,4,1,3,3)
    //    (4,2,1,3,3)
    //    (3,2,1,2,3)
    //    (1,2,2,3,3)
    //    (2,3,1,3,2)
    //    (1,3,2,3,2)
    //    (2,1,2,3,3)
    //    (3,1,2,2,3)

    val user_rdd12=user_rdd11.map(f=>(f._1,f._2,(f._3/sqrt(f._4*f._5))))
    //    (2,4,0.3333333333333333)
    //    (4,2,0.3333333333333333)
    //    (3,2,0.4082482904638631)
    //    (1,2,0.6666666666666666)
    //    (2,3,0.4082482904638631)
    //    (1,3,0.8164965809277261)
    //    (2,1,0.6666666666666666)
    //    (3,1,0.8164965809277261)

    //
    user_rdd12.map(f=>ItemSimi(f._1,f._2,f._3))

  }
}
