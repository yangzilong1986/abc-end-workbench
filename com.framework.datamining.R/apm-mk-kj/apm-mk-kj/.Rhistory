trainPredictors <- predictors[trainingRows, ]
trainClasses <- classes[trainingRows]
testPredictors <- predictors[-trainingRows, ]
testClasses <- classes[-trainingRows]
str(trainPredictors)
str(testPredictors)
trainPredictors <- as.matrix(trainPredictors)
knnFit <- knn3(x = trainPredictors, y = trainClasses, k = 5)
knnFit
testPredictions <- predict(knnFit, newdata = testPredictors,
type = "class")
head(testPredictions)
str(testPredictions)
data(GermanCredit)
set.seed(1056)
svmFit <- train(Class ~ .,data = GermanCreditTrain,method = "svmRadial",
preProc = c("center", "scale"))
library(AppliedPredictiveModeling)
data(GermanCredit)
set.seed(1056)
svmFit <- train(Class ~ .,data = GermanCreditTrain,method = "svmRadial",
preProc = c("center", "scale"))
View(transformed)
svmFit <- train(Class ~ .,data = GermanCreditTrain,method = "svmRadial",
preProc = c("center", "scale"))
GermanCreditTrain<-data(GermanCredit)
set.seed(1056)
svmFit <- train(Class ~ .,data = GermanCreditTrain,method = "svmRadial",
preProc = c("center", "scale"))
svmFit <- train(Class ~ .,data = GermanCredit,method = "svmRadial",
preProc = c("center", "scale"))
svmFit
svmFit <- train(Class ~ .,data = GermanCredit,method = "svmRadial",
preProc = c("center", "scale"),tuneLength = 10)
svmFit <- train(Class ~ .,data = GermanCredit,method = "svmRadial",
preProc = c("center", "scale"),tuneLength = 10,
trControl = trainControl(method = "repeatedcv",repeats = 5))
plot(svmFit, scales = list(x = list(log = 2)))
vip(svmFit)
svmvif<-vif(svmFit)
library(car)
svmvif<-vif(svmFit)
data(solubility)
ls(pattern = "^solT")
set.seed(2)
sample(names(solTrainX), 8)
ctrl <- trainControl(method = "cv", number = 10)
trainingData <- solTrainXtrans
trainingData$Solubility <- solTrainY
head(trainingData)
ridgeModel <- enet(x = as.matrix(solTrainXtrans),
y = solTrainY,
lambda = 0.001)
plot(ridgeModel)
ridgePred <- predict(ridgeModel, newx = as.matrix(solTestXtrans),
s = 1, mode = "fraction",type = "fit")
library(elasticnet)
library(caret)
library(lars)
library(MASS)
library(pls)
library(stats)
library(AppliedPredictiveModeling)
data(solubility)
ls(pattern = "^solT")
set.seed(2)
sample(names(solTrainX), 8)
ctrl <- trainControl(method = "cv", number = 10)
trainingData <- solTrainXtrans
trainingData$Solubility <- solTrainY
head(trainingData)
ridgeModel <- enet(x = as.matrix(solTrainXtrans),
y = solTrainY,
lambda = 0.001)
plot(ridgeModel)
ridgeVif=vif(ridgeModel)
ridgeVif=vif(trainingData)
ridgePred <- predict(ridgeModel, newx = as.matrix(solTestXtrans),
s = 1, mode = "fraction",type = "fit")
ridgeVif=vif(ridgePred)
correlations <- cor(trainingData)
dim(correlations)
correlations
highCorr <- findCorrelation(correlations, cutoff = .75)
library(AppliedPredictiveModeling)
highCorr <- findCorrelation(correlations, cutoff = .75)
library(car)
highCorr <- findCorrelation(correlations, cutoff = .75)
library(elasticnet)
library(caret)
library(lars)
library(MASS)
library(pls)
library(stats)
library(car)
library(AppliedPredictiveModeling)
data(solubility)
ls(pattern = "^solT")
set.seed(2)
sample(names(solTrainX), 8)
ctrl <- trainControl(method = "cv", number = 10)
trainingData <- solTrainXtrans
trainingData$Solubility <- solTrainY
head(trainingData)
correlations <- cor(trainingData)
dim(correlations)
correlations
highCorr <- findCorrelation(correlations, cutoff = .75)
correlations[highCorr]
str(highCorr)
correlations[,-highCorr]
correlations[1:4, 1:4]
correlations[1:9, 1:4]
correlations[1:9, 1:9]
length(highCorr)
highCorr <- findCorrelation(correlations, cutoff = .85)
length(highCorr)
head(highCorr)
filteredSegData <- segData[, -highCorr]
filteredSegData
set.seed(100)
lmFit <- train(x = solTrainXtrans, y = solTrainY,
method = "lm", trControl = ctrl)
lmFit
xyplot(solTrainY ~ predict(lmFit),
## plot the points (type = 'p') and a background grid ('g')
type = c("p", "g"),
xlab = "Predicted", ylab = "Observed")
xyplot(resid(lmFit) ~ predict(lmFit),
type = c("p", "g"),
xlab = "Predicted", ylab = "Residuals")
corThresh <- .9
tooHigh <- findCorrelation(cor(solTrainXtrans), corThresh)
corrPred <- names(solTrainXtrans)[tooHigh]
trainXfiltered <- solTrainXtrans[, -tooHigh]
testXfiltered <- solTestXtrans[, -tooHigh]
set.seed(100)
lmFiltered <- train(solTrainXtrans, solTrainY, method = "lm",
trControl = ctrl)
lmFiltered
lmFiltered <- train(trainXfiltered, solTrainY, method = "lm",
trControl = ctrl)
lmFiltered
set.seed(100)
rlmPCA <- train(solTrainXtrans, solTrainY,
method = "rlm",
preProcess = "pca",
trControl = ctrl)
rlmPCA
plot(rlmPCA)
plot(lmFiltered)
set.seed(100)
lmFiltered <- train(trainXfiltered, solTrainY, method = "lm",
trControl = ctrl)
lmFiltered
plot(lmFiltered)
plot(lmFiltered$fit)
library(elasticnet)
library(caret)
library(lars)
library(MASS)
library(pls)
library(stats)
library(AppliedPredictiveModeling)
data(solubility)
ls(pattern = "^solT")
set.seed(2)
sample(names(solTrainX), 8)
ctrl <- trainControl(method = "cv", number = 10)
plsFit <- plsr(Solubility ~ ., data = trainingData)
predict(plsFit, solTestXtrans[1:5,], ncomp = 1:2)
set.seed(100)
set.seed(100)
plsTune <- train(solTrainXtrans, solTrainY,
method = "pls",
## The default tuning grid evaluates
## components 1... tuneLength
tuneLength = 20,
trControl = ctrl,
preProc = c("center", "scale"))
plsTune
plot(plsTune$results$ncomp,plsTune$results$RMSE,
xlab = "component",ylab = "RMSE(Cross-Validation)",
main = "PLS", sub="NI-PALS",
#xlim=c(0, 20), ylim=c(0, 2),
col="red",type="b",lty=1)
legend("topright", inset=.05, c("pls"), lty=c(1),col=c("red"))
set.seed(100)
pcr.fit=pcr(Solubility~., data=trainingData,scale=TRUE,validation="CV")
summary(pcr.fit)
validationplot(pcr.fit,val.type="MSEP")
set.seed(1)
pls.fit=plsr(Solubility~., data=trainingData,subset=train,scale=TRUE, validation="CV")
set.seed(100)
pls.fit=plsr(Solubility~., data=trainingData,scale=TRUE, validation="CV")
summary(pls.fit)
validationplot(pls.fit,val.type="MSEP")
summary(pls.fit)
plot(ridgeRegFit)
library(elasticnet)
library(caret)
library(lars)
library(MASS)
library(pls)
library(stats)
library(AppliedPredictiveModeling)
data(solubility)
ls(pattern = "^solT")
set.seed(2)
sample(names(solTrainX), 8)
ctrl <- trainControl(method = "cv", number = 10)
trainingData <- solTrainXtrans
trainingData$Solubility <- solTrainY
head(trainingData)
ridgeModel <- enet(x = as.matrix(solTrainXtrans),
y = solTrainY,
lambda = 0.001)
plot(ridgeModel)
library(elasticnet)
library(caret)
library(lars)
library(MASS)
library(pls)
library(stats)
library(AppliedPredictiveModeling)
#' solubility
#' @examples
handleData()
@export
handleData<- function(){
data(solubility)
##以solT开头的数据对象
ls(pattern = "^solT")
set.seed(2)
sample(names(solTrainX), 8)
#用于交叉验证
ctrl <- trainControl(method = "cv", number = 10)
#Ordinary Linear Regression
#lm:trainingData <- solTrainXtrans
#Add the solubility outcome
trainingData <- solTrainXtrans
trainingData$Solubility <- solTrainY
head(trainingData)
}
library(caret)
library(AppliedPredictiveModeling)
library(lattice)
library(ggplot2)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
segData <- subset(segmentationOriginal, Case == "Train")
cellID <- segData$Cell
class <- segData$Class
case <- segData$Case
segData <- segData[, -(1:3)]
statusColNum <- grep("Status", names(segData))
statusColNum
segData <- segData[, -statusColNum]
library(e1071)
skewness(segData$AngleCh1)
skewValues <- apply(segData, 2, skewness)
head(skewValues)
Ch1AreaTrans <- BoxCoxTrans(segData$AreaCh1)
Ch1AreaTrans
head(segData$AreaCh1)
predict(Ch1AreaTrans, head(segData$AreaCh1))
pcaObject <- prcomp(segData,
center = TRUE, scale. = TRUE)
library(car)
scatterplotMatrix(~segData$AngleCh1+segData$AvgIntenCh4 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
source('D:/DevN/abc-end-workbench/com.framework.datamining.R/apm-mk-kj/apm-mk-kj/rlm-linear-regression.R', encoding = 'UTF-8')
library(lattice)
library(ggplot2)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
library(car)
data(segmentationOriginal)
segData <- subset(segmentationOriginal, Case == "Train")
cellID <- segData$Cell
class <- segData$Class
case <- segData$Case
segData <- segData[, -(1:3)]
statusColNum <- grep("Status", names(segData))
statusColNum
segData <- segData[, -statusColNum]
skewness(segData$AngleCh1)
skewValues <- apply(segData, 2, skewness)
head(skewValues)
Ch1AreaTrans <- BoxCoxTrans(segData$AreaCh1)
Ch1AreaTrans
head(segData$AreaCh1)
head(segData)
pcaObject <- prcomp(segData,
center = TRUE, scale. = TRUE)
scatterplotMatrix(~segData[,c(1,2)] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
segData[,c(1,2)]
segData[c(1,2)]
scatterplotMatrix(~segData[c(1,2)] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData$AngleCh1+segData$AvgIntenCh4 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData[,c(1:5)] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
segData[,c(1:5)]
segData$AvgIntenCh1
segData[,c(1:2)]
scatterplotMatrix(~segData[,c(1:2)] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData[,c(1:2)] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
names(segData)
states <- as.data.frame(segData[,c(names(segData))])
scatterplotMatrix(~states , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
states
states <- as.data.frame(segData[,c(names(segData)),8])
states
states <- as.data.frame(segData[,c(names(segData)),2])
states
scatterplotMatrix(~states
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~states ,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~states$AngleCh1 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
states
scatterplotMatrix(~states$AngleCh1 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData$AngleCh1 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData$AngleCh1+segData$AvgIntenCh4 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData[,2]+segData[,1] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData$AngleCh1+segData$AvgIntenCh4 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
segData[,c("AngleCh1")]
segData[,c("AngleCh1","AvgIntenCh4")]
scatterplotMatrix(~segData[,c("AngleCh1","AvgIntenCh4")] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData[c("AngleCh1","AvgIntenCh4")] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
segData[c("AngleCh1","AvgIntenCh4")]
segData[,c("AngleCh1","AvgIntenCh4")]
scatterplotMatrix(~segData[c("AngleCh1")]+segData[c("AvgIntenCh4")] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData[c(1)]+segData[c(2)] , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~segData$AngleCh1+segData$AvgIntenCh4 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
plot(pcaObject)
scatterplotMatrix(~segData$AngleCh1+segData$AvgIntenCh4 , data=segData,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
source('D:/DevN/abc-end-workbench/com.framework.datamining.R/apm-mk-kj/apm-mk-kj/ridge-linear-regression.R', encoding = 'UTF-8')
pcaObject <- prcomp(segData,
center = TRUE, scale. = TRUE)
plot(pcaObject$x[,1], pcaObject$x[,2],
xlab="pc1",
ylab="pc2")
plot(pcaObject)
plot(pcaObject)
plot(pcaObject$x[,1], pcaObject$x[,2],
xlab="pc1",
ylab="pc2")
percentVariance <- pcaObject$sd^2/sum(pcaObject$sd^2)*100
percentVariance[1:3]
head(pcaObject$x[, 1:5])
plot(percentVariance,type="b",xlab = "Component",ylab = "Percent Total Variance")
scatterplotMatrix(~pcaObject$x[,c(1:5)], data=pcaObject$x,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
dotchart(pcaObject$x, labels=row.names(pcaObject$x), cex=.7,
main="Gas Mileage for Car Models",
xlab="Miles Per Gallon")
dotchart(pcaObject$x, labels=row.names(pcaObject$x), cex=.7,
main="Gas Mileage for Car Models",
xlab="Miles Per Gallon")
labels=row.names(pcaObject$x)
labels
names(pcaObject$x)
pcaObject$x
names(pcaObject$x)
names(pcaObject$x[,c(1:5)])
dotchart(pcaObject$x, labels=row.names(pcaObject$x), cex=.7,
main="Gas Mileage for Car Models",
xlab="Miles Per Gallon")
names(segData)
states <- as.data.frame(segData[,c(names(segData))])
cor(states)
cor(states)
scatterplotMatrix(states, spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix")
states
segDatanames=names(segData)
segDatanames
segDatanames[1:10]
states <- as.data.frame(segData[,c(segDatanames[1:10])])
states
cor(states)
scatterplotMatrix(states, spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix")
dim(correlations)
correlations[1:4, 1:4]
corrplot(correlations, order = "hclust")
corrplot(correlations)
correlations
scatterplotMatrix(~pcaObject$x[,c(1:5)], data=pcaObject$x,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
scatterplotMatrix(~pcaObject$x[,c(1:15)], data=pcaObject$x,
spread=FALSE, smoother.args=list(lty=2),
main="Scatter Plot Matrix via car Package")
pcaObject$x[,c(1:15)]
dotchart(pcaObject$x, labels=row.names(pcaObject$x), cex=.7,
main="PCA",
xlab="Component")
dotchart(pcaObject15, labels=row.names(pcaObject15), cex=.7,
main="PCA-15",
xlab="Component-15")
pcaObject15
pcaObject15<-pcaObject$x[,c(1:15)]
pcaObject15
dotchart(pcaObject15, labels=row.names(pcaObject15), cex=.7,
main="PCA-15",
xlab="Component-15")
segDatanames=names(segData)
states <- as.data.frame(segData[,c(segDatanames[1:10])])
scatterplotMatrix(states, spread=FALSE, smoother.args=list(lty=2),
main="Scatter")
correlations <- cor(segData)
dim(correlations)
correlations
corrplot(correlations)
highCorr <- findCorrelation(correlations, cutoff = .75)
length(highCorr)
head(highCorr)
filteredSegData <- segData[, -highCorr]
filteredSegData
correlations <- cor(segData)
dim(correlations)
correlations
corrplot(correlations)
highCorr <- findCorrelation(correlations, cutoff = .75)
corrplot(correlations)
filteredSegData <- segData[, -highCorr]
filteredSegData
highCorr <- findCorrelation(correlations, cutoff = .80)
length(highCorr)
head(highCorr)
filteredSegData <- segData[, -highCorr]
filteredSegData
scatterplotMatrix(filteredSegData, spread=FALSE, smoother.args=list(lty=2),
main="Main")
highCorr <- findCorrelation(correlations, cutoff = .90)
length(highCorr)
head(highCorr)
filteredSegData <- segData[, -highCorr]
filteredSegData
filteredSegData <- segData[, highCorr]
filteredSegData
scatterplotMatrix(filteredSegData, spread=FALSE, smoother.args=list(lty=2),
main="Main")
filteredSegData <- segData[, highCorr]
filteredSegData <- as.data.frame(filteredSegData[,c(segDatanames[1:10])])
filteredSegData <- segData[, highCorr]
filtersegDatanames=names(filteredSegData)
filteredSegData <- as.data.frame(filteredSegData[,c(filtersegDatanames[1:10])])
scatterplotMatrix(filteredSegData, spread=FALSE, smoother.args=list(lty=2),
main="Main")
correlations <- cor(segData)
dim(correlations)
correlations
corrplot(correlations)
plot(pcaObject$x[,1], pcaObject$x[,2],
xlab="pc1",
ylab="pc2")
percentVariance <- pcaObject$sd^2/sum(pcaObject$sd^2)*100
percentVariance[1:3]
plot(percentVariance,type="b",xlab = "Component",ylab = "Percent Total Variance")
library(AppliedPredictiveModeling)
GermanCreditTrain<-data(GermanCredit)
set.seed(1056)
svmFit <- train(Class ~ .,data = GermanCredit,method = "svmRadial",
preProc = c("center", "scale"),tuneLength = 10,
trControl = trainControl(method = "repeatedcv",repeats = 5))
plot(svmFit, scales = list(x = list(log = 2)))
